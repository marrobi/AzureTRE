name: Deploy Azure TRE

on:
  schedule:
    # 1am each night https://crontab.guru/#0_1_*_*_*
    - cron: "0 1 * * *"
  push:
    branches: [develop, main, deniscep/ssl-bug]
  workflow_dispatch:

# This will prevent multiple runs of this entire workflow.
# We should NOT cancel running ones as that might destabilize the environment.
concurrency: deploy-e2e

env:
  USE_ENV_VARS_NOT_FILES: true
  DOCKER_BUILDKIT: 1
  TF_INPUT: 0 # interactive is off

jobs:
  deploy_mgmt_infra:
    name: Deploy Management Infrastructure
    runs-on: ubuntu-latest
    environment: Dev
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Install Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.0.5

      - name: Create Management Infrastructure
        shell: bash
        env:
          AZURE_CREDENTIALS: ${{ secrets.AZURE_CREDENTIALS }}
          TF_VAR_tre_id: ${{ secrets.TRE_ID }}
          TF_VAR_terraform_state_container_name: ${{ secrets.TF_STATE_CONTAINER }}
          TF_VAR_mgmt_resource_group_name: ${{ secrets.MGMT_RESOURCE_GROUP }}
          TF_VAR_mgmt_storage_account_name: ${{ secrets.STATE_STORAGE_ACCOUNT_NAME }}
          LOCATION: ${{ secrets.LOCATION }} # scripts are using this too
          TF_VAR_location: ${{ secrets.LOCATION }}
          ACR_NAME: ${{ secrets.ACR_NAME }} # scripts are using this too
          TF_VAR_acr_name: ${{ secrets.ACR_NAME }}
          TF_VAR_porter_output_container_name: "${{ secrets.PORTER_OUTPUT_CONTAINER_NAME }}"

        run: |
          export ARM_CLIENT_ID=$(echo "$AZURE_CREDENTIALS" | jq -r '.clientId')
          export ARM_CLIENT_SECRET=$(echo "$AZURE_CREDENTIALS" | jq -r '.clientSecret')
          export ARM_SUBSCRIPTION_ID=$(echo "$AZURE_CREDENTIALS" | jq -r '.subscriptionId')
          export ARM_TENANT_ID=$(echo "$AZURE_CREDENTIALS" | jq -r '.tenantId')
          export TF_VAR_arm_subscription_id=$ARM_SUBSCRIPTION_ID

          make bootstrap
          make mgmt-deploy

  deploy_tre:
    name: Deploy TRE
    needs: deploy_mgmt_infra
    runs-on: ubuntu-latest
    environment: Dev
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Install Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.0.5

      - name: Deploy TRE
        shell: bash
        env:
          AZURE_CREDENTIALS: ${{ secrets.AZURE_CREDENTIALS }}
          TF_VAR_tre_id: ${{ secrets.TRE_ID }}
          TF_VAR_terraform_state_container_name: ${{ secrets.TF_STATE_CONTAINER }}
          TF_VAR_mgmt_resource_group_name: ${{ secrets.MGMT_RESOURCE_GROUP }}
          TF_VAR_mgmt_storage_account_name: ${{ secrets.STATE_STORAGE_ACCOUNT_NAME }}
          LOCATION: ${{ secrets.LOCATION }} # scripts are using this too
          TF_VAR_location: ${{ secrets.LOCATION }}
          ACR_NAME: ${{ secrets.ACR_NAME }} # scripts are using this too
          TF_VAR_acr_name: ${{ secrets.ACR_NAME }}
          TF_VAR_core_address_space: ${{ secrets.CORE_ADDRESS_SPACE }}
          TF_VAR_tre_address_space: ${{ secrets.TRE_ADDRESS_SPACE }}
          TF_VAR_swagger_ui_client_id: "${{ secrets.SWAGGER_UI_CLIENT_ID }}"
          TF_VAR_aad_tenant_id: "${{ secrets.AAD_TENANT_ID }}"
          TF_VAR_api_client_id: "${{ secrets.API_CLIENT_ID }}"
          TF_VAR_api_client_secret: "${{ secrets.API_CLIENT_SECRET }}"
          TF_VAR_porter_output_container_name: "${{ secrets.PORTER_OUTPUT_CONTAINER_NAME }}"
          TF_VAR_debug: false
          IMAGE_TAG: ${{ github.sha }} # scripts are using this too
          TF_VAR_api_image_tag: ${{ github.sha }}
          TF_VAR_resource_processor_type: "vmss_porter"
          TF_VAR_resource_processor_vmss_porter_image_tag: ${{ github.sha }}
          TF_VAR_deploy_gitea: true
          TF_VAR_gitea_image_tag: ${{ github.sha }}
          TF_VAR_deploy_nexus: true

        run: |
          export ARM_CLIENT_ID=$(echo "$AZURE_CREDENTIALS" | jq -r '.clientId')
          export ARM_CLIENT_SECRET=$(echo "$AZURE_CREDENTIALS" | jq -r '.clientSecret')
          export ARM_SUBSCRIPTION_ID=$(echo "$AZURE_CREDENTIALS" | jq -r '.subscriptionId')
          export ARM_TENANT_ID=$(echo "$AZURE_CREDENTIALS" | jq -r '.tenantId')

          make letsencrypt
          make all

      - name: Notify dedicated teams channel
        uses: sachinkundu/ms-teams-notification@1.4
        if: ${{ failure() && (github.ref == 'refs/heads/develop' || github.ref == 'refs/heads/main') }}
        with:
          github-token: ${{ github.token }}
          ms-teams-webhook-uri: ${{ secrets.MS_TEAMS_WEBHOOK_URI }}
          notification-summary: "Deploy TRE Failed"
          notification-color: dc3545
          timezone: Europe/Zurich

  publish_and_register_workspace_bundles:
    name: Publish and Register Workspace Bundles
    runs-on: ubuntu-latest
    needs: [deploy_tre]
    environment: Dev
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      - name: Publish and register workspace bundles
        shell: bash
        env:
          ACR_NAME: ${{ secrets.ACR_NAME }}
          RESOURCE_LOCATION: "${{ secrets.LOCATION }}"
          TRE_ID: "${{ secrets.TRE_ID }}"
          RESOURCE: "${{ secrets.API_CLIENT_ID }}"
          AUTH_TENANT_ID: "${{ secrets.AAD_TENANT_ID }}"
          CLIENT_ID: "${{ secrets.TEST_APP_ID }}"
          USERNAME: "${{ secrets.TEST_USER_NAME }}"
          PASSWORD: "${{ secrets.TEST_USER_PASSWORD }}"
          AUTH_APP_CLIENT_ID: "${{ secrets.TEST_WORKSPACE_APP_ID }}"
          TRE_URL: "https://${{secrets.TRE_ID}}.${{secrets.LOCATION}}.cloudapp.azure.com"
          BUNDLE_TYPE: "workspace"
        run: |
          curl -L https://cdn.porter.sh/latest/install-linux.sh | bash && ~/.porter/porter mixin install docker
          export PATH=~/.porter/:$PATH

          # Get TRE API access token
          # ************************
          export RESPONSE=$(curl -X POST -H "Content-Type: application/x-www-form-urlencoded" -d "grant_type=password&resource=${RESOURCE}&client_id=${CLIENT_ID}&username=${USERNAME}&password=${PASSWORD}&scope=default)" https://login.microsoftonline.com/${AUTH_TENANT_ID}/oauth2/token)
          export TOKEN=$(jq -r '.access_token' <<< "$RESPONSE")

          # Check if base template is already registered
          # ********************************************
          export STATUS_CODE=$(curl -X "GET" "${TRE_URL}/api/workspace-templates/tre-workspace-base" -H "accept: application/json" -H "Authorization: Bearer ${TOKEN}" -k -s -w "%{http_code}" -o /dev/null)

          if [[ ${STATUS_CODE} == 404 ]]
          then
            make register-bundle DIR=./templates/workspaces/base
          fi

          # Check if azureml_devtestlabs template is already registered
          # ***********************************************************
          export STATUS_CODE=$(curl -X "GET" "${TRE_URL}/api/workspace-templates/tre-workspace-azureml-devtestlabs" -H "accept: application/json" -H "Authorization: Bearer ${TOKEN}" -k -s -w "%{http_code}" -o /dev/null)

          if [[ ${STATUS_CODE} == 404 ]]
          then
            make register-bundle DIR=./templates/workspaces/azureml_devtestlabs
          fi

          # Check if innereye_deeplearning template is already registered
          # *************************************************************
          export STATUS_CODE=$(curl -X "GET" "${TRE_URL}/api/workspace-templates/tre-workspace-innereye-deeplearning" -H "accept: application/json" -H "Authorization: Bearer ${TOKEN}" -k -s -w "%{http_code}" -o /dev/null)

          if [[ ${STATUS_CODE} == 404 ]]
          then
            make register-bundle DIR=./templates/workspaces/innereye_deeplearning
          fi

          # Check if innereye_deeplearning_inference template is already registered
          # ***********************************************************************
          export STATUS_CODE=$(curl -X "GET" "${TRE_URL}/api/workspace-templates/tre-workspace-innereye-deeplearning-inference" -H "accept: application/json" -H "Authorization: Bearer ${TOKEN}" -k -s -w "%{http_code}" -o /dev/null)

          if [[ ${STATUS_CODE} == 404 ]]
          then
            make register-bundle DIR=./templates/workspaces/innereye_deeplearning_inference
          fi

  publish_and_register_workspace_service_bundles:
    name: Publish and Register Workspace Service Bundles
    runs-on: ubuntu-latest
    needs: [deploy_tre]
    environment: Dev
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      - name: Publish and register workspace bundles
        shell: bash
        env:
          ACR_NAME: ${{ secrets.ACR_NAME }}
          RESOURCE_LOCATION: "${{ secrets.LOCATION }}"
          TRE_ID: "${{ secrets.TRE_ID }}"
          RESOURCE: "${{ secrets.API_CLIENT_ID }}"
          AUTH_TENANT_ID: "${{ secrets.AAD_TENANT_ID }}"
          CLIENT_ID: "${{ secrets.TEST_APP_ID }}"
          USERNAME: "${{ secrets.TEST_USER_NAME }}"
          PASSWORD: "${{ secrets.TEST_USER_PASSWORD }}"
          AUTH_APP_CLIENT_ID: "${{ secrets.TEST_WORKSPACE_APP_ID }}"
          TRE_URL: "https://${{secrets.TRE_ID}}.${{secrets.LOCATION}}.cloudapp.azure.com"
          BUNDLE_TYPE: "workspace_service"
        run: |
          curl -L https://cdn.porter.sh/latest/install-linux.sh | bash && ~/.porter/porter mixin install docker
          export PATH=~/.porter/:$PATH

          make porter-build DIR=./templates/workspace_services/azureml
          make porter-build DIR=./templates/workspace_services/devtestlabs
          make porter-build DIR=./templates/workspace_services/innereye_deeplearning
          make porter-build DIR=./templates/workspace_services/innereye_inference

          # Get TRE API access token
          # ************************
          export RESPONSE=$(curl -X POST -H "Content-Type: application/x-www-form-urlencoded" -d "grant_type=password&resource=${RESOURCE}&client_id=${CLIENT_ID}&username=${USERNAME}&password=${PASSWORD}&scope=default)" https://login.microsoftonline.com/${AUTH_TENANT_ID}/oauth2/token)
          export TOKEN=$(jq -r '.access_token' <<< "$RESPONSE")

          # Check if guacamole service template is already registered
          # *********************************************************
          export STATUS_CODE=$(curl -X "GET" "${TRE_URL}/api/workspace-service-templates/tre-service-guacamole" -H "accept: application/json" -H "Authorization: Bearer ${TOKEN}" -k -s -w "%{http_code}" -o /dev/null)

          if [[ ${STATUS_CODE} == 404 ]]
          then
            make register-bundle DIR=./templates/workspace_services/guacamole
          fi

          # Check if azureml service template is already registered
          # *********************************************************
          export STATUS_CODE=$(curl -X "GET" "${TRE_URL}/api/workspace-service-templates/tre-service-azureml" -H "accept: application/json" -H "Authorization: Bearer ${TOKEN}" -k -s -w "%{http_code}" -o /dev/null)

          if [[ ${STATUS_CODE} == 404 ]]
          then
            make register-bundle DIR=./templates/workspace_services/azureml
          fi

          # Check if devtestlabs service template is already registered
          # *********************************************************
          export STATUS_CODE=$(curl -X "GET" "${TRE_URL}/api/workspace-service-templates/tre-service-devtestlabs" -H "accept: application/json" -H "Authorization: Bearer ${TOKEN}" -k -s -w "%{http_code}" -o /dev/null)

          if [[ ${STATUS_CODE} == 404 ]]
          then
            make register-bundle DIR=./templates/workspace_services/devtestlabs
          fi

          # Check if tre-service-innereye-deeplearning service template is already registered
          # *********************************************************
          export STATUS_CODE=$(curl -X "GET" "${TRE_URL}/api/workspace-service-templates/tre-service-innereye-deeplearning" -H "accept: application/json" -H "Authorization: Bearer ${TOKEN}" -k -s -w "%{http_code}" -o /dev/null)

          if [[ ${STATUS_CODE} == 404 ]]
          then
            make register-bundle DIR=./templates/workspace_services/innereye_deeplearning
          fi

          # Check if tre-service-innereye-inference service template is already registered
          # *********************************************************
          export STATUS_CODE=$(curl -X "GET" "${TRE_URL}/api/workspace-service-templates/tre-service-innereye-inference" -H "accept: application/json" -H "Authorization: Bearer ${TOKEN}" -k -s -w "%{http_code}" -o /dev/null)

          if [[ ${STATUS_CODE} == 404 ]]
          then
            make register-bundle DIR=./templates/workspace_services/innereye_inference
          fi

  e2e_tests:
    name: "Run E2E Tests"
    runs-on: ubuntu-latest
    environment: Dev
    needs: [publish_and_register_workspace_bundles, publish_and_register_workspace_service_bundles]
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Python 3.8
        uses: actions/setup-python@v2
        with:
          python-version: 3.8

      - name: Install dependencies
        run: |
          cd e2e_tests
          python -m pip install --upgrade pip
          pip install pytest
          pip install -r requirements.txt

      - name: Test with pytest
        shell: bash
        env:
          RESOURCE_LOCATION: "${{ secrets.LOCATION }}"
          TRE_ID: "${{ secrets.TRE_ID }}"
          RESOURCE: "${{ secrets.API_CLIENT_ID }}"
          AUTH_TENANT_ID: "${{ secrets.AAD_TENANT_ID }}"
          CLIENT_ID: "${{ secrets.TEST_APP_ID }}"
          USERNAME: "${{ secrets.TEST_USER_NAME }}"
          PASSWORD: "${{ secrets.TEST_USER_PASSWORD }}"
          AUTH_APP_CLIENT_ID: "${{ secrets.TEST_WORKSPACE_APP_ID }}"
        run: |
          export SCOPE=$(echo "api://$RESOURCE/Workspace.Read api://$RESOURCE/Workspace.Write")
          export RESOURCE_LOCATION=$RESOURCE_LOCATION
          export TRE_ID=$TRE_ID
          export RESOURCE=$RESOURCE
          export AUTH_TENANT_ID=$AUTH_TENANT_ID
          export CLIENT_ID=$CLIENT_ID
          export USERNAME=$USERNAME
          export PASSWORD=$PASSWORD
          export AUTH_APP_CLIENT_ID=$AUTH_APP_CLIENT_ID
          cd e2e_tests
          PYTHONPATH=. python -m pytest -m smoke --junit-xml pytest_e2e.xml
      - name: Notify dedicated teams channel
        uses: sachinkundu/ms-teams-notification@1.4
        if: ${{ failure() && (github.ref == 'refs/heads/develop' || github.ref == 'refs/heads/main') }}
        continue-on-error: true
        with:
          github-token: ${{ github.token }}
          ms-teams-webhook-uri: ${{ secrets.MS_TEAMS_WEBHOOK_URI }}
          notification-summary: "E2E Tests failed"
          notification-color: dc3545
          timezone: Europe/Zurich

      - name: Expose workspace id
        shell: bash
        if: always()
        run: |
          cd e2e_tests
          wkspc_id=`cat workspace_id.txt`
          echo "WORKSPACE_ID=$wkspc_id" >> $GITHUB_ENV

      - name: Notify dedicated teams channel
        uses: sachinkundu/ms-teams-notification@1.4
        if: ${{ success() && (github.ref == 'refs/heads/develop' || github.ref == 'refs/heads/main') }}
        continue-on-error: true
        with:
          github-token: ${{ github.token }}
          ms-teams-webhook-uri: ${{ secrets.MS_TEAMS_WEBHOOK_URI }}
          notification-summary: "Deployment and tests passed successfully"
          notification-color: 28a745
          timezone: Europe/Zurich

      - name: Upload Unit Test Results
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: E2E Test Results (Python ${{ matrix.python-version }})
          path: "./e2e_tests/pytest_e2e.xml"

  publish-test-results:
    name: "Publish E2E Tests Results"
    needs: e2e_tests
    runs-on: ubuntu-latest
    # the build job might be skipped, we don't need to run this job then
    if: success() || failure()

    steps:
      - name: Download Artifacts
        uses: actions/download-artifact@v2
        with:
          path: artifacts

      - name: Publish Unit Test Results
        uses: EnricoMi/publish-unit-test-result-action@v1
        if: always()
        with:
          files: artifacts/**/*.xml

  # deploy_azureml_devtestlabs_workspace:
  #   name: Deploy Azure ML and DevTest Labs Workspace
  #   needs: [publish_innereye_bundles]
  #   runs-on: ubuntu-latest
  #   environment: Dev
  #   steps:
  #   - name: Checkout
  #     uses: actions/checkout@v2
  #   - name: Azure Login
  #     uses: azure/login@v1
  #     with:
  #       creds: ${{ secrets.AZURE_CREDENTIALS }}
  #   - name: Publish and deploy azureml_devtestlabs workspace bundle
  #     shell: bash
  #     env:
  #       TRE_ID: ${{ secrets.TRE_ID }}
  #       LOCATION: ${{ secrets.LOCATION }}
  #       WORKSPACE_ID: "0002"
  #       ADDRESS_SPACE: "10.2.2.0/24"
  #       ACR_NAME: ${{ secrets.ACR_NAME }}
  #       TERRAFORM_STATE_CONTAINER_NAME: ${{ secrets.TF_STATE_CONTAINER }}
  #       MGMT_RESOURCE_GROUP_NAME: ${{ secrets.MGMT_RESOURCE_GROUP }}
  #       MGMT_STORAGE_ACCOUNT_NAME: ${{ secrets.STATE_STORAGE_ACCOUNT_NAME }}
  #       AZURE_CREDENTIALS: ${{ secrets.AZURE_CREDENTIALS }}
  #     run: |
  #         export USE_ENV_VARS_NOT_FILES=true
  #         export env
  #         export ARM_CLIENT_ID=$(echo "$AZURE_CREDENTIALS" | jq -r '.clientId')
  #         export ARM_CLIENT_SECRET=$(echo "$AZURE_CREDENTIALS" | jq -r '.clientSecret')
  #         export ARM_SUBSCRIPTION_ID=$(echo "$AZURE_CREDENTIALS" | jq -r '.subscriptionId')
  #         export ARM_TENANT_ID=$(echo "$AZURE_CREDENTIALS" | jq -r '.tenantId')
  #         curl -L https://cdn.porter.sh/latest/install-linux.sh | bash && ~/.porter/porter mixin install docker
  #         export PATH=~/.porter/:$PATH
  #         make porter-publish DIR=./templates/workspaces/azureml_devtestlabs
  #         make porter-install DIR=./templates/workspaces/azureml_devtestlabs
  # deploy_innereye_deeplearning_workspace:
  #   name: Deploy InnerEye Deep Learning Workspace
  #   needs: [deploy_azureml_devtestlabs_workspace]
  #   runs-on: ubuntu-latest
  #   environment: Dev
  #   steps:
  #   - name: Checkout
  #     uses: actions/checkout@v2
  #   - name: Azure Login
  #     uses: azure/login@v1
  #     with:
  #       creds: ${{ secrets.AZURE_CREDENTIALS }}
  #   - name: Publish and deploy azureml_devtestlabs workspace bundle
  #     shell: bash
  #     env:
  #       TRE_ID: ${{ secrets.TRE_ID }}
  #       LOCATION: ${{ secrets.LOCATION }}
  #       WORKSPACE_ID: "0003"
  #       ADDRESS_SPACE: "10.2.3.0/24"
  #       ACR_NAME: ${{ secrets.ACR_NAME }}
  #       TERRAFORM_STATE_CONTAINER_NAME: ${{ secrets.TF_STATE_CONTAINER }}
  #       MGMT_RESOURCE_GROUP_NAME: ${{ secrets.MGMT_RESOURCE_GROUP }}
  #       MGMT_STORAGE_ACCOUNT_NAME: ${{ secrets.STATE_STORAGE_ACCOUNT_NAME }}
  #       AZURE_CREDENTIALS: ${{ secrets.AZURE_CREDENTIALS }}
  #     run: |
  #         export USE_ENV_VARS_NOT_FILES=true
  #         export env
  #         export ARM_CLIENT_ID=$(echo "$AZURE_CREDENTIALS" | jq -r '.clientId')
  #         export ARM_CLIENT_SECRET=$(echo "$AZURE_CREDENTIALS" | jq -r '.clientSecret')
  #         export ARM_SUBSCRIPTION_ID=$(echo "$AZURE_CREDENTIALS" | jq -r '.subscriptionId')
  #         export ARM_TENANT_ID=$(echo "$AZURE_CREDENTIALS" | jq -r '.tenantId')
  #         curl -L https://cdn.porter.sh/latest/install-linux.sh | bash && ~/.porter/porter mixin install docker
  #         export PATH=~/.porter/:$PATH
  #         make porter-publish DIR=./templates/workspaces/innereye_deeplearning
  #         make porter-install DIR=./templates/workspaces/innereye_deeplearning
  # deploy_innereye_deeplearning_inference_workspace:
  #   name: Deploy InnerEye Deep Learning & Inference Workspace
  #   needs: [deploy_innereye_deeplearning_workspace]
  #   runs-on: ubuntu-latest
  #   environment: Dev
  #   steps:
  #   - name: Checkout
  #     uses: actions/checkout@v2
  #   - name: Azure Login
  #     uses: azure/login@v1
  #     with:
  #       creds: ${{ secrets.AZURE_CREDENTIALS }}
  #   - name: Publish and deploy innereye_deeplearning_inference workspace bundle
  #     shell: bash
  #     env:
  #       TRE_ID: ${{ secrets.TRE_ID }}
  #       LOCATION: ${{ secrets.LOCATION }}
  #       WORKSPACE_ID: "0004"
  #       ADDRESS_SPACE: "10.2.4.0/24"
  #       ACR_NAME: ${{ secrets.ACR_NAME }}
  #       TERRAFORM_STATE_CONTAINER_NAME: ${{ secrets.TF_STATE_CONTAINER }}
  #       MGMT_RESOURCE_GROUP_NAME: ${{ secrets.MGMT_RESOURCE_GROUP }}
  #       MGMT_STORAGE_ACCOUNT_NAME: ${{ secrets.STATE_STORAGE_ACCOUNT_NAME }}
  #       AZURE_CREDENTIALS: ${{ secrets.AZURE_CREDENTIALS }}
  #     run: |
  #         export USE_ENV_VARS_NOT_FILES=true
  #         export env
  #         export ARM_CLIENT_ID=$(echo "$AZURE_CREDENTIALS" | jq -r '.clientId')
  #         export ARM_CLIENT_SECRET=$(echo "$AZURE_CREDENTIALS" | jq -r '.clientSecret')
  #         export ARM_SUBSCRIPTION_ID=$(echo "$AZURE_CREDENTIALS" | jq -r '.subscriptionId')
  #         export ARM_TENANT_ID=$(echo "$AZURE_CREDENTIALS" | jq -r '.tenantId')
  #         export INFERENCE_SP_CLIENT_ID=$(echo "$AZURE_CREDENTIALS" | jq -r '.clientId')
  #         export INFERENCE_SP_CLIENT_SECRET=$(echo "$AZURE_CREDENTIALS" | jq -r '.clientSecret')
  #         curl -L https://cdn.porter.sh/latest/install-linux.sh | bash && ~/.porter/porter mixin install docker
  #         export PATH=~/.porter/:$PATH
  #         make porter-publish DIR=./templates/workspaces/innereye_deeplearning_inference
  #         make porter-install DIR=./templates/workspaces/innereye_deeplearning_inference
